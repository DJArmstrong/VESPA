#!/usr/bin/env python
from __future__ import print_function, division

import os, os.path
import pandas as pd
import argparse

from vespa.kepler import KOI_FPPCalculation
from keputils import koiutils as ku
import kplr

from pkg_resources import resource_filename

import logging

import warnings
warnings.simplefilter("error")
warnings.simplefilter("ignore", DeprecationWarning)

DATAFOLDER = resource_filename('vespa','data')
WEAKSECFILE = os.path.join(DATAFOLDER, 'weakSecondary_socv9p2vv.csv')
WEAKSECDATA = pd.read_csv(WEAKSECFILE,skiprows=8)
WEAKSECDATA.index = WEAKSECDATA['KOI'].apply(ku.koiname)

parser = argparse.ArgumentParser(description='Generate FP models for a list of KOIs')

parser.add_argument('kois',metavar='KOI',nargs='*',help='a KOI (or list of kois)')
parser.add_argument('-n','--n',type=int,default=2e4)
parser.add_argument('-o','--overwrite',action='store_true')
parser.add_argument('--noJRowefit',action='store_true')

args = parser.parse_args()

client = kplr.API()

KOI_FPPDIR = os.getenv('KOI_FPPDIR',os.path.expanduser('~/.koifpp'))

for koi in args.kois:
    logfile = os.path.join(KOI_FPPDIR,ku.koiname(koi),'run.log')
    logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s',
                        filename=logfile)
    logger = logging.getLogger(__name__)

    logging.info('Starting FPP calculation for {}...'.format(ku.koiname(koi)))

    try:
        k = client.koi(ku.koiname(koi,koinum=True))

        fpp = KOI_FPPCalculation(koi, n=args.n, recalc=args.overwrite)

        try:
            weaksec = WEAKSECDATA.ix[ku.koiname(koi)]
            secthresh = (weaksec['depth'] + 3*weaksec['e_depth'])*1e-6
            if weaksec['depth'] <= 0:
                raise KeyError

        except KeyError:
            secthresh = 10*k.koi_depth_err1 * 1e-6
            logging.warning('No (or bad) weak secondary info for {}. Defaulting to 10x reported depth error = {}'.format(koi, secthresh))

        try:
            r_excl = k.koi_dicco_msky_err * 3
            r_excl = max(r_excl, 0.5) #minimum 0.5 arcsec
        except:
            r_excl = 4
            logging.warning('No weak secondary info for {}. Defaulting to 10x reported depth error = {}'.format(koi, secthresh))

        fpp.apply_secthresh(secthresh)
        fpp.set_maxrad(r_excl)

        fpp.FPPplots()

        logging.info('FPP calculation for {} successful.'.format(ku.koiname(koi)))

    except Exception, e:
        logging.error('FPP calculation failed for {}'.format(koi), exc_info=True)


